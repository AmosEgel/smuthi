# -*- coding: utf-8 -*-
import numpy as np
import smuthi.particles as part
import smuthi.linearsystem.particlecoupling.direct_coupling as pacou


spheroid1 = part.Spheroid(position=[0, 0, 400], euler_angles=[0.324, 0.567, 1.234],
                          refractive_index=2.4 + 0.0j, semi_axis_c=50, semi_axis_a=100, l_max=5, m_max=5, t_matrix_method=None)
spheroid2 = part.Spheroid(position=[162, 261, 253], euler_angles=[0.45, 1.23, 0.788],
                          refractive_index=2.4 + 0.0j, semi_axis_c=100, semi_axis_a=50, l_max=5, m_max=5, t_matrix_method=None)

p1, p2, alpha, beta = pacou.spheroids_closest_points(spheroid1.semi_axis_a, spheroid1.semi_axis_c, spheroid1.position, spheroid1.euler_angles,
                                     spheroid2.semi_axis_a, spheroid2.semi_axis_c, spheroid2.position, spheroid2.euler_angles)
# Values generated by Matlab, and cross-checked via Comsol visualization 
p1_matlab = np.array([43.35, 78.08, 355.20])
p2_matlab = np.array([112.83, 212.50, 266.37])


def test_closest_points():
    err_p1 = np.linalg.norm(p1 - p1_matlab) / np.linalg.norm(p1_matlab)
    err_p2 = np.linalg.norm(p2 - p2_matlab) / np.linalg.norm(p2_matlab) 
    print('error p1:', err_p1)
    print('error p2:', err_p2)
    assert err_p1 < 1e-4
    assert err_p2 < 1e-4


if __name__ == '__main__':
    test_closest_points()
